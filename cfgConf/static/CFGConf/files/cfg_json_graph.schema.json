{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"title": "Schema for CFG graph in JSON format",
	"description": "JSON Schema for CFG graph specified in json format",
	"type": "object",
	"required": ["nodes", "edges"],
	"properties": {
		"nodes": {"$ref": "#/$defs/nodes"},
		"edges": {"$ref": "#/$defs/edges"},
		"loops": {"$ref": "#/$defs/loops"},
		"functions": {"$ref": "#/$defs/functions"}
	},
	"$defs": {
		"nodes": {
			"type": "array",
			"items": {
				"type": "object",
				"required": ["id"],
				"properties": {
					"id": {
						"type": "string",
						"description": "The id of the node. Also acts as the label if label not specified."
					},
					"label": {
						"type": "string",
						"description": "the label for the node"
					},
					"shape": {
						"type": "string",
						"description": "One of the shapes in dot"
					},
					"style": {
						"type": "string",
						"description": "One of the styles in dot"
					},
					"color": {
						"type": "string",
						"description": "Drawing color except for text in dot"
					}, 
					"fillcolor": {
						"type": "string",
						"description": "Node/Cluster background color for style filled"
					},
					"fontcolor": {
						"type": "string",
						"description": "Text color as in dot"
					},
					"tooltip": {
						"type": "string",
						"description": "Tooltip for the node"
					},
					"data": {
						"type": "object",
						"description":"This object contains arbitrary data for the node (similar to graphML)"
					}, 
					"class": {
						"type": "string", 
						"description": "Classnames to attach to the node; Combine with style in the css file to achieve styling of the nodes; Multiple space-separated classes are supported."
					}
				} 
			}
		},

		"edges": {
			"type": "array",
			"items": {
				"type": "object",
				"required": ["source", "target"],
				"properties": {
					"source": {
						"type": "string",
						"description": "The id of the source node in the edge"
					},
					"target": {
						"type": "string",
						"description": "The id of the target node in the edge"
					},
					"weight": {
						"type": "number",
						"minimum": 0,
						"description": "The weight of the edge. The heavier the weight, the shorter, straighter and more vertical the edge is."
					},
					"label": {
						"type": "string",
						"description": "The label of the edge"
					},
					"headport": {
						"type": "string",
						"description": "The port of the target node when routing the edge. Can be one of 'n','ne','e','se','s','sw','w','nw','c'"
					},
					"tailport": {
						"type": "string",
						"description": "The port of the source node when routing the edge. Can be one of 'n','ne','e','se','s','sw','w','nw','c'"
					},
					"style": {
						"type": "string",
						"description": "The style of the edge defined in dot"
					},
					"color": {
						"type": "string",
						"description": "The color of the edge excluding the text"
					},
					"arrowhead": {
						"type": "string",
						"description": "arrowhead as defined in dot"
					},
					"arrowsize": {
						"type":"number",
						"minimum": 0,
						"description": "arrowsize as defined in dot"
					},
					"tooltip": {
						"type": "string",
						"description": "the tooltip for the edge"
					},
					"data": {
						"type": "object",
						"description": "Object which contains arbitrary data for the edge (similar to graphML)"
					}, 
					"class": {
						"type": "string", 
						"description": "Classnames to attach to the edge; Combine with style in the css file to achieve styling of the edges; Multiple space-separated classes are supported."
					}
				}
			}
		},

		"loops": {
			"type": "array",
			"items": {
				"type": "object",
				"required": ["id", "nodes", "backedges"],
				"properties": {
					"id": {
						"type": "string",
						"description": "The id of the loop"
					},
					"label": {
						"type": "string",
						"description": "The label of the loop"
					},
					"nodes": {
						"type": "array",
						"description": "The array of node Ids",
						"items": {
							"type": "string"
						}
					},
					"backedges": {
						"type": "array",
						"description": "The array of backedges for the loop",
						"items": {
							"type": "array",
							"description": "The backedge in the form of an array. The first element is the Id of the source (tail) node of the backedge and the second element is the Id of the target (head) node of the backedge",
							"items": {
								"type": "string"
							},
							"minItems": 2,
	  						"maxItems": 2
						}
					},
					"data": {
						"type": "object",
						"description": "Object which contains arbitrary data for the loop."
					},
					"loops": {
						"$ref": "#/$defs/loops",
						"description": "This contains the loops inside the current loop"
					}
				}
			}
		},

		"functions": {
			"type": "array",
			"items": {
				"type": "object",
				"required": ["id", "nodes"],
				"properties": {
					"id": {
						"type": "string",
						"description": "the id of the function"
					},
					"label": {
						"type": "string",
						"description": "the label for the function"
					},
					"nodes": {
						"type": "array",
						"description": "the array of node Ids in the function",
						"items": {
							"type": "string"
						},
						"uniqueItems": true
					},
					"data": {
						"type": "object",
						"description": "Object which contains arbitrary data for the function."
					}
				}
			}
		}
	}
}

	







